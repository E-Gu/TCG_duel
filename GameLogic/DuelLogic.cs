using System;
using System.Collections;
using System.Collections.Generic;
using TcgEngine.Client;
using UnityEditor;
using UnityEngine;

namespace TcgEngine.Gameplay
{
    /// <summary>
    /// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—É—ç–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
    /// –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π GameLogic –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¥—É—ç–ª–∏ –º–µ—Ç–æ–¥—ã.
    /// </summary>
    public class DuelLogic : GameLogic
    {
        // –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ç–∞–∫—É—é—â–µ–π –∏ –∑–∞—â–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ –¥—É—ç–ª–∏
        private Card duelAttacker = null;
        private Card duelDefender = null;

        public DuelLogic(Game game) : base(game)
        {
            //Debug.Log("DuelLogic(Game game) constructor finished");
        }

        public override void StartGame()
        {
            //Debug.Log("–ó–∞–ø—É—Å–∫ –¥—É—ç–ª—å–Ω–æ–π –∏–≥—Ä—ã");
            base.StartGame();

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –¥—É—ç–ª–∏
            onCardPlayed += HandleDuelCardPlayed;
        }

        public override void StartTurn()
        {
            Debug.Log("üîÑ [DuelLogic] –ù–æ–≤—ã–π —Ö–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –°–±—Ä–æ—Å –¥—É—ç–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...");

            // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—Ç–∞–∫—É—é—â—É—é –∏ –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Ö–æ–¥–∞
            duelAttacker = null;
            duelDefender = null;

            base.StartTurn();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –¥—É—ç–ª–∏.
        /// –ï—Å–ª–∏ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞, –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ—ë –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥,
        /// —á—Ç–æ–±—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É.
        /// –ï—Å–ª–∏ –∞—Ç–∞–∫—É—é—â–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –∏ –∫–∞—Ä—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É ‚Äì –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ—ë –∑–∞—â–∏—Ç–Ω–æ–π –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥—É—ç–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥.
        /// </summary>
        private void HandleDuelCardPlayed(Card card, Slot slot)
        {
            int designatedAttacker = GameData.first_player; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ

            // ‚úÖ –ï—Å–ª–∏ –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äì –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ—ë
            if (duelAttacker == null)
            {
                if (card.player_id == designatedAttacker)
                {
                    duelAttacker = card;
                    Debug.Log($"üõ° –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {card.card_id} (–∏–≥—Ä–æ–∫ {card.player_id})");
                    EndTurnImmediate(); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥, –¥–∞–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç–Ω–∏–∫—É –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É
                }
                else
                {
                    Debug.Log($"‚ùå {GameClient.Get().GetPlayerName(card.player_id)} –Ω–µ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–º! –ñ–¥—ë–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ.");
                }
            }
            // ‚úÖ –ï—Å–ª–∏ –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –µ—Å—Ç—å ‚Äì –≤—ã–±–∏—Ä–∞–µ–º –∑–∞—â–∏—Ç–Ω—É—é
            else if (duelDefender == null)
            {
                if (card.player_id != duelAttacker.player_id)
                {
                    duelDefender = card;
                    Debug.Log($"üõ° [DuelLogic] –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {card.card_id} (–∏–≥—Ä–æ–∫ {card.player_id})");

                    // üöÄ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –¥—É—ç–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥**
                    RunDuelRound();
                }
                else
                {
                    Debug.Log($"‚ùå {GameClient.Get().GetPlayerName(card.player_id)} –Ω–µ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –¥–≤–∞–∂–¥—ã!");
                }
            }
            else
            {
                Debug.Log("‚ùå –î—É—ç–ª—å —É–∂–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–æ–∑—ã–≥—Ä—ã–≤–∞–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.");
            }
        }
        public void PlayDefenderCard(Card card)
        {
            if (duelAttacker == null)
            {
                Debug.LogWarning("[DuelLogic] –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É, –ø–æ–∫–∞ –∞—Ç–∞–∫—É—é—â–∞—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!");
                return;
            }

            if (duelDefender != null)
            {
                Debug.LogWarning("[DuelLogic] –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!");
                return;
            }

            duelDefender = card;
            Debug.Log($"üõ° [DuelLogic] –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {card.card_id} ({GameClient.Get().GetPlayerName(card.player_id)})");

            RunDuelRound(); // ‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å
        }

        public override void AttackTarget(Card attacker, Card target, bool skip_cost = true)
        {
            //Debug.Log("DuelLogic.AttackTarget called on object of type: " + this.GetType().Name);
            //Debug.Log("CanAttackTarget " + GameData.CanAttackTarget(attacker, target, skip_cost));
            if (GameData.CanAttackTarget(attacker, target, skip_cost))
            {
                Player player = GameData.GetPlayer(attacker.player_id);
                //if (!is_ai_predict)
                //player.AddHistory(GameAction.Attack, attacker, target);
                GameData.last_target = target.uid;
                TriggerCardAbilityType(AbilityTrigger.OnBeforeAttack, attacker, target);
                TriggerCardAbilityType(AbilityTrigger.OnBeforeDefend, target, attacker);
                TriggerSecrets(AbilityTrigger.OnBeforeAttack, attacker);
                TriggerSecrets(AbilityTrigger.OnBeforeDefend, target);
                ResolveQueue.AddAttack(attacker, target, ResolveAttack, skip_cost);
                ResolveQueue.ResolveAll(0.2f);
            }
        }
        public override void DamageCard(Card target, int value)
        {
            Debug.Log($"DuelLogic.DamageCard (overload 1) called: {value} damage to {target.card_id}");
            base.DamageCard(target, value);
            Debug.Log($"After damage, card {target.card_id} HP: {target.GetHP()}");
        }

        public override void DamageCard(Card attacker, Card target, int value, bool spell_damage = false)
        {
            //Debug.Log($"{value} damage from {attacker.card_id} to {target.card_id}");
            base.DamageCard(attacker, target, value, spell_damage);
            //Debug.Log($"After damage, card {target.card_id} HP: {target.GetHP()}");
        }

        public void EndTurnImmediate()
        {
            //Debug.Log("EndTurnImmediate called");
            base.EndTurn();
            // –ó–¥–µ—Å—å –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º resolve_queue.ResolveAll, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∑–∞–¥–µ—Ä–∂–µ–∫.
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—É–Ω–¥ –¥—É—ç–ª–∏ –º–µ–∂–¥—É duelAttacker –∏ duelDefender.
        /// –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è: –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –∞—Ç–∞–∫—É–µ—Ç –∑–∞—â–∏—Ç–Ω—É—é, –∑–∞—Ç–µ–º –∑–∞—â–∏—Ç–Ω–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç.
        /// –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∫–∞ —É –æ–¥–Ω–æ–π –∏–∑ –∫–∞—Ä—Ç –Ω–µ –æ–ø—É—Å—Ç–∏—Ç—Å—è HP –¥–æ 0.
        /// </summary>
        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—É–Ω–¥ –¥—É—ç–ª–∏ –º–µ–∂–¥—É duelAttacker –∏ duelDefender.
        /// –¢–µ–ø–µ—Ä—å —Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–µ–∫, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∏ –∑–∞—â–∏—Ç—ã –æ—Ç null.
        /// </summary>
        private void RunDuelRound()
        {
            Debug.Log("‚öîÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥!");

            if (duelAttacker == null || duelDefender == null)
            {
                Debug.LogError("‚ùå –û—à–∏–±–∫–∞! duelAttacker –∏–ª–∏ duelDefender = null. –†–∞—É–Ω–¥ –ø—Ä–µ—Ä–≤–∞–Ω.");
                EndDuelRound();
                return;
            }

            if (duelAttacker.GetHP() <= 0 || duelDefender.GetHP() <= 0)
            {
                Debug.Log("üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—É—ç–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ –æ–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç —É–∂–µ –º–µ—Ä—Ç–≤–∞.");
                EndDuelRound();
                return;
            }

            // üèÜ –§–∞–∑–∞ 1: –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –∞—Ç–∞–∫—É–µ—Ç –∑–∞—â–∏—Ç–Ω—É—é.
            ResolveQueue.AddCallback(() =>
            {
                if (duelAttacker == null || duelDefender == null) return;
                Debug.Log($"‚ö° {duelAttacker.card_id} –∞—Ç–∞–∫—É–µ—Ç {duelDefender.card_id}");
                this.AttackTarget(duelAttacker, duelDefender, false);
            });

            // üõ°Ô∏è –§–∞–∑–∞ 2: –∑–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã–∂–∏–ª–∞.
            ResolveQueue.AddCallback(() =>
            {
                if (duelDefender == null) return;

                if (duelDefender.GetHP() <= 0)
                {
                    Debug.Log("üíÄ –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!");
                    EndDuelRound();
                }
                else
                {
                    if (duelAttacker == null) return;
                    Debug.Log($"üîÑ {duelDefender.card_id} –æ—Ç–≤–µ—á–∞–µ—Ç –∞—Ç–∞–∫–æ–π –Ω–∞ {duelAttacker.card_id}");
                    this.AttackTarget(duelDefender, duelAttacker, false);
                }
            });

            // üîÑ –§–∞–∑–∞ 3: –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∫–∞—Ä—Ç—ã –Ω–∞ –ø–æ–ª–µ.
            ResolveQueue.AddCallback(() =>
            {
                Debug.Log("üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏...");
                RefreshData();

                if (duelAttacker == null || duelDefender == null)
                {
                    Debug.Log("‚ùå duelAttacker –∏–ª–∏ duelDefender —Å—Ç–∞–ª–∏ null –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏!");
                    EndDuelRound();
                    return;
                }

                if (!GameData.IsOnBoard(duelAttacker))
                {
                    Debug.Log("üíÄ –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ (–Ω–µ –Ω–∞ –ø–æ–ª–µ)!");
                    EndDuelRound();
                }
                else if (!GameData.IsOnBoard(duelDefender))
                {
                    Debug.Log("üíÄ –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ (–Ω–µ –Ω–∞ –ø–æ–ª–µ)!");
                    EndDuelRound();
                }
                else
                {
                    Debug.Log("üîÅ –û–±–µ –∫–∞—Ä—Ç—ã –∂–∏–≤—ã, —Å–ª–µ–¥—É—é—â–∏–π –æ–±–º–µ–Ω —É–¥–∞—Ä–∞–º–∏.");
                    RunDuelRound();
                }
            });

            // üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1.5 —Å–µ–∫—É–Ω–¥—ã
            Debug.Log("üöÄ –ó–∞–ø—É—Å–∫ `ResolveQueue.ResolveAll(1.5f)`!");
            ResolveQueue.ResolveAll(1.5f);
        }
        /// <summary>
        /// üì¢ –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–µ–π—Å—Ç–≤–∏—è –≤ ResolveQueue
        /// </summary>
        private void LogQueueActions()
        {
            Debug.Log("üìú –û—á–µ—Ä–µ–¥—å –¥–µ–π—Å—Ç–≤–∏–π –≤ `ResolveQueue`:");

            Queue<AttackQueueElement> attackQueue = ResolveQueue.GetAttackQueue();
            Queue<AbilityQueueElement> abilityQueue = ResolveQueue.GetAbilityQueue();
            Queue<SecretQueueElement> secretQueue = ResolveQueue.GetSecretQueue();
            Queue<CallbackQueueElement> callbackQueue = ResolveQueue.GetCallbackQueue();

            if (attackQueue.Count == 0 && abilityQueue.Count == 0 && secretQueue.Count == 0 && callbackQueue.Count == 0)
            {
                Debug.Log("‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.");
                return;
            }

            foreach (var action in attackQueue)
                Debug.Log($"‚öîÔ∏è –ê—Ç–∞–∫–∞: {action.attacker.card_id} -> {action.target?.card_id}");

            foreach (var action in abilityQueue)
                Debug.Log($"üßô‚Äç‚ôÇÔ∏è –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {action.ability.id} —É {action.caster.card_id}");

            foreach (var action in secretQueue)
                Debug.Log($"üîÆ –°–µ–∫—Ä–µ—Ç: {action.secret.card_id} —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º {action.secret_trigger}");

            foreach (var action in callbackQueue)
                Debug.Log("üîÑ Callback-—Ñ—É–Ω–∫—Ü–∏—è");
        }

        /// <summary>
        /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –¥—É—ç–ª–∏.
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º HP) –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–æ –≥–µ—Ä–æ—é –ø–æ–±–µ–¥–∏–≤—à–µ–π –∫–∞—Ä—Ç—ã.
        /// –ó–∞—Ç–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥—É—ç–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞, –≥–¥–µ —Ä–æ–ª–∏ –º–µ–Ω—è—é—Ç—Å—è.
        /// </summary>
        /// <summary>
        /// –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –¥—É—ç–ª–∏, —Ç–µ–ø–µ—Ä—å —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç.
        /// </summary>
        private void EndDuelRound()
        {
            Debug.Log("‚öîÔ∏è EndDuelRound –≤—ã–∑–≤–∞–Ω!");

            bool attackerAlive = duelAttacker != null && GameData.IsOnBoard(duelAttacker);
            bool defenderAlive = duelDefender != null && GameData.IsOnBoard(duelDefender);

            if (!attackerAlive && !defenderAlive)
            {
                Debug.Log("üèÅ –î—É—ç–ª—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤–Ω–∏—á—å—é, –æ–±–µ –∫–∞—Ä—Ç—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã.");
            }
            else if (attackerAlive && !defenderAlive)
            {
                Debug.Log($"üèÜ –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ {duelAttacker.card_id} –ø–æ–±–µ–¥–∏–ª–∞ –¥—É—ç–ª—å.");
                Player owner = GameData.GetPlayer(duelAttacker.player_id);
                owner.score++;
                Debug.Log($"{GameClient.Get().GetPlayerName(owner.player_id)} –ø–æ–ª—É—á–∞–µ—Ç 1 –æ—á–∫–æ, –≤—Å–µ–≥–æ –æ—á–∫–æ–≤: {owner.score}");
            }
            else if (!attackerAlive && defenderAlive)
            {
                Debug.Log($"üèÜ –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ {duelDefender.card_id} –ø–æ–±–µ–¥–∏–ª–∞ –¥—É—ç–ª—å.");
                Player owner = GameData.GetPlayer(duelDefender.player_id);
                owner.score++;
                Debug.Log($"{GameClient.Get().GetPlayerName(owner.player_id)} –ø–æ–ª—É—á–∞–µ—Ç 1 –æ—á–∫–æ, –≤—Å–µ–≥–æ –æ—á–∫–æ–≤: {owner.score}");
            }

            // ‚è≥ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç
            ResolveQueue.AddCallback(() =>
            {
                Debug.Log("‚åõ –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç...");
                TimeTool.WaitFor(1f, () =>
                {
                    // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç —Å –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                    if (duelAttacker != null)
                    {
                        Debug.Log($"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞—Ç–∞–∫—É—é—â—É—é –∫–∞—Ä—Ç—É {duelAttacker.card_id}");
                        DiscardCard(duelAttacker);
                    }

                    if (duelDefender != null)
                    {
                        Debug.Log($"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É {duelDefender.card_id}");
                        DiscardCard(duelDefender);
                    }

                    // üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—É—ç–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
                    duelAttacker = null;
                    duelDefender = null;

                    // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    RefreshData();

                    // ‚úÖ –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
                    TimeTool.StartCoroutine(WaitForResolveQueueAndStartNewRound());
                });
            });
        }

        private IEnumerator WaitForResolveQueueAndStartNewRound()
        {
            Debug.Log("üïí –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º...");

            while (ResolveQueue.IsResolving())
            {
                Debug.Log("[DuelLogic] –û—á–µ—Ä–µ–¥—å –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∂–¥—ë–º...");
                yield return new WaitForSeconds(0.5f);
            }

            Debug.Log("‚úÖ –û—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...");
            yield return new WaitForSeconds(2f);

            ResolveQueue.Clear(); // üîÑ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º

            int nextAttackerId = (GameData.first_player == 0) ? 1 : 0;
            GameData.first_player = nextAttackerId;
            GameData.current_player = nextAttackerId;

            Debug.Log($"üîÑ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –¥—É—ç–ª–∏: –∞—Ç–∞–∫—É—é—â–∏–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è {GameClient.Get().GetPlayerName(nextAttackerId)}");

            Debug.Log($"‚úÖ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Ä–∞—É–Ω–¥—É. –û–∂–∏–¥–∞–µ–º —Ö–æ–¥ –æ—Ç {GameClient.Get().GetPlayerName(nextAttackerId)}");
        }
        /// <summary>
        /// –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –¥—É—ç–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç.
        /// </summary>
        private void StartNewDuelRound()
        {
            Debug.Log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º...");
            TimeTool.StartCoroutine(WaitForResolveQueueAndStartNewRound());
        }



        private void AISelectDefender()
        {
            if (duelDefender != null) return; // ‚úÖ –£–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É

            Game game_data = GetGameData();
            Player aiPlayer = game_data.GetPlayer(GameData.first_player == 0 ? 1 : 0); // AI –≤—Å–µ–≥–¥–∞ –∑–∞—â–∏—â–∞–µ—Ç—Å—è

            if (aiPlayer.cards_hand.Count > 0)
            {
                duelDefender = aiPlayer.cards_hand[0]; // AI –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏
                Debug.Log($"[AI] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É: {duelDefender.card_id}");

                // üî• –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä–æ–∫–∞!
                HandleDuelCardPlayed(duelDefender, Slot.None);
            }
            else
            {
                Debug.LogWarning("[AI] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã!");
                EndDuelRound(); // ‚úÖ –ï—Å–ª–∏ –Ω–µ—á–µ–º –∑–∞—â–∏—â–∞—Ç—å—Å—è, —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
            }
        }

        private IEnumerator WaitForResolveQueue()
        {
            while (ResolveQueue.IsResolving())
            {
                Debug.Log("[DuelLogic] –ñ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º...");
                yield return new WaitForSeconds(0.5f);
            }
        }
        public Card GetDuelAttacker()
        {
            return duelAttacker;
        }
        public Card GetDuelDefender()
        {
            return duelDefender;
        }
        public bool IsResolveQueueActive()
        {
            return ResolveQueue.IsResolving();
        }
        public void StartDuelRound()
        {
            RunDuelRound();
        }

    }





}
